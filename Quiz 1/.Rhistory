q()
X <- 1
print(x)
print(X)
X
msg <- "Hello World"
msg
msg[3]
msg(3)
x <- 1:20
x
x[12]
clear
x <- vector(numeric, 10)
help.start()
x -> list(1, "a", T, 1 + 4i)
x -> list(1, "a", True, 1 + 4i)
x -> list(1, "a", TRUE, 1 + 4i)
x <- list(1, "a", TRUE, 1 + 4i)
x
x <- factor("Yes", "No", "Maybe")
x
x <- factor("Yes", "No")
x
x <- factor(c("Yes", "No", "Maybe"))
x
x <- c("a", "b", "c")
x
names(x)
names(x) <- c("A", "B", "C")
x
x["B"]
}
f <- function(a, b)
{
a^2
}
f(2)
f(2,3)
f <- function(a, b)
{
print(a)
print(b)
}
f(2,3)
f(2)
f <- function(a, b = 69)
{
print(a)
print(b)
}
f(2)
args(paste)
args(ncol)
search()
x^2 + y/z
}
f <- function(x, y)
{
x^2 + y/z
}
f <- function(x, y)
{
x^2 + y/z
}
f(2,3)
z<-69
f(2,69)
make.power <- function(n) {
pow <- function(x){
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(7)
square(69)
}
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
> set.seed(1); normals <- rnorm(100, 1, 2)
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nll
nLL
ls(environment(nLL))
optim(c(mu=0, sigma=1,nLL))$params
optim(c(mu=0, sigma=1),nLL)$params
optim(c(mu = 0, sigma = 1), nLL)$par
optim(c(mu = 0, sigma = 1), nLL)$params
optim(c(mu = 0, sigma = 1), nLL)$par
optim(c(mu = 0, sigma = 1), nLL)$para
optim(c(mu = 0, sigma = 1), nLL)$pa
optim(c(mu = 0, sigma = 1), nLL)$params
optim(c(mu = 0, sigma = 1), nLL)$p
nLL <- make.NegLogLik(normals, c(FALSE, 2))
optimize(nLL, c(-1,3))$minimum
optimize
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
mean(x)
myFun <- function() {
myFun <- function() {
x <- rnorm(1000)
mean(x)
}
myFun <- function() {
x <- rnorm(1000)
mean(x)
}
myFun()
myFun()
myFun()
clear
clear()
x <- 69
print(x)
msg<-"Hello World"
print(msg)
msg
x
x<-1:20
x
x[-3]
x[-3:-7]
Inf
Nan
NaN
y<-c(1.7, T)
y
y<-c(1.7, T, "69")
y
as.numeric(y)
y<-c(T, 2, 3)
as.numeric(y)
x<-list(1, c(T,f))
x<-list(1, c(T,F))
x
m<-maxtrix(2,3)
m<-matrix(2,3)
m
mattrix
matrix()
m<-matrix(1:9, nrow=2, ncol=3)
m<-matrix(1:6, nrow=2, ncol=3)
m
dim(m)<-c(1,6)
m
dim(m)<-c(3,3)
dim(m)<-c(3,2)
m
dim(m)<-c(2,3)
m
dim(m)<-c(6,1)
m
x<-factor(c("Yes", "Yes", "No", "Yes", "No"))
x
table(x)
attributes(x)
pwd
dir
dir()
pwd()
read.table()
read.table
help(read.table)
x<-url(www.google.com)
x<-url("www.google.com")
con<-url("http://www.google.com")
x<-realline(con)
x<-readline(con)
x
x<-readline(con, r)
con<-url("http://www.google.com", "r")
x<-readlines(con)
x<-readlines(con)
x<-readLines(con)
con<-url("http://www.google.com", "r")
x<-readLines(con)
head(x)
dir()
pwd()
load("D:/Skitch/Code/R/Quiz 1/.RData")
ls()
Oz
#  Quiz 1
wrkDir<-"D:/Skitch/Code/R/R Programming/Quiz 1"
setwd(wrkDir)
# Q. 10 Set elements of verctor to 0 if GT 6
x<-c(3, 5, 1, 10, 12, 6)
x %in% 1:5 # Returns vector of logical
x[x %in% 1:5] <- 0  # logical vector is evaluated and elements that are true are set to
x
#Q. 11, 12 Column names and first 2 rows
data<-read.csv("hw1_data.csv")
head(data, 2)
#Q. 13 Total number of observations
nrow(data)
#Q. 14 Last 2 rows
tail(data, 2)
#Q. 15 The 47th element of Ozone column
ozone<-data[,"Ozone"]
ozone[47]
#Q. 16  Number of missing Ozone values
length(ozone[is.na(ozone)])
#Q 17  What is the mean of the Ozone
ozone[!is.na(ozone)]  # This returns the array of all NA values
mean(ozone)  # This returns NA
mean(ozone[!is.na(ozone)])  # this is the mean of all NA values
#Q 18  Mean of Solar R when Ozone > 31 and Temp > 90
ozone31<-subset(data, ozone>31 & Temp>90)
mean(ozone31[,"Solar.R"])
#Q 19 Mean of temp for June (Month == 6)
dataJune<-subset(data, Month==6)
mean(dataJune[,"Temp"])
#Q 20. Max Ozone for May (Month == 5)
dataMay<-subset(data, Month==5)
ozoneMay<-dataMay[,"Ozone"]
max(ozoneMay[!is.na(ozoneMay)])
